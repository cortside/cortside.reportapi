// <auto-generated />
using System;
using Cortside.SqlReportApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cortside.SqlReportApi.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241217231220_CreatedSubject")]
    partial class CreatedSubject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cortside.AspNetCore.Auditable.Entities.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Subject primary key");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time entity was created");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Subject Surname ()");

                    b.Property<string>("GivenName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Subject primary key");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Subject primary key");

                    b.Property<string>("UserPrincipalName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Username (upn claim)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subject", "dbo", t =>
                        {
                            t.HasTrigger("trSubject");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Permission")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReportGroupId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportGroupId");

                    b.ToTable("Report", "dbo", t =>
                        {
                            t.HasTrigger("trReport");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Entities.ReportArgument", b =>
                {
                    b.Property<int>("ReportArgumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportArgumentId"));

                    b.Property<string>("ArgName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ArgType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ReportArgumentQueryId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("ReportArgumentId");

                    b.HasIndex("ReportArgumentQueryId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportArgument", "dbo", t =>
                        {
                            t.HasTrigger("trReportArgument");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Entities.ReportArgumentQuery", b =>
                {
                    b.Property<int>("ReportArgumentQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportArgumentQueryId"));

                    b.Property<string>("ArgQuery")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportArgumentQueryId");

                    b.ToTable("ReportArgumentQuery", "dbo", t =>
                        {
                            t.HasTrigger("trReportArgumentQuery");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Entities.ReportGroup", b =>
                {
                    b.Property<int>("ReportGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportGroupId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReportGroupId");

                    b.ToTable("ReportGroup", "dbo", t =>
                        {
                            t.HasTrigger("trReportGroup");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Entities.Report", b =>
                {
                    b.HasOne("Cortside.SqlReportApi.Domain.Entities.ReportGroup", "ReportGroup")
                        .WithMany()
                        .HasForeignKey("ReportGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReportGroup");
                });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Entities.ReportArgument", b =>
                {
                    b.HasOne("Cortside.SqlReportApi.Domain.Entities.ReportArgumentQuery", "ReportArgumentQuery")
                        .WithMany()
                        .HasForeignKey("ReportArgumentQueryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Cortside.SqlReportApi.Domain.Entities.Report", null)
                        .WithMany("ReportArguments")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReportArgumentQuery");
                });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Entities.Report", b =>
                {
                    b.Navigation("ReportArguments");
                });
#pragma warning restore 612, 618
        }
    }
}
