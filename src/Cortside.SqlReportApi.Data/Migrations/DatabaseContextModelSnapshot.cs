// <auto-generated />
using System;
using Cortside.SqlReportApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cortside.SqlReportApi.Data.Migrations {
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot {
        protected override void BuildModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Report", b => {
                b.Property<int>("ReportId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Description")
                    .HasMaxLength(250)
                    .HasColumnType("nvarchar(250)");

                b.Property<string>("Name")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("Permission")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<int>("ReportGroupId")
                    .HasColumnType("int");

                b.HasKey("ReportId");

                b.HasIndex("ReportGroupId");

                b.ToTable("Report");
            });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.ReportArgument", b => {
                b.Property<int>("ReportArgumentId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ArgName")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("ArgType")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("Name")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<int?>("ReportArgumentQueryId")
                    .HasColumnType("int");

                b.Property<int>("ReportId")
                    .HasColumnType("int");

                b.Property<int>("Sequence")
                    .HasColumnType("int");

                b.HasKey("ReportArgumentId");

                b.HasIndex("ReportArgumentQueryId");

                b.HasIndex("ReportId");

                b.ToTable("ReportArgument");
            });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.ReportArgumentQuery", b => {
                b.Property<int>("ReportArgumentQueryId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ArgQuery")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("ReportArgumentQueryId");

                b.ToTable("ReportArgumentQuery");
            });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.ReportGroup", b => {
                b.Property<int>("ReportGroupId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("ReportGroupId");

                b.ToTable("ReportGroup");
            });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Subject", b => {
                b.Property<Guid>("SubjectId")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime2");

                b.Property<string>("FamilyName")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("GivenName")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("Name")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("UserPrincipalName")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("SubjectId");

                b.ToTable("Subject");
            });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Report", b => {
                b.HasOne("Cortside.SqlReportApi.Domain.ReportGroup", "ReportGroup")
                    .WithMany()
                    .HasForeignKey("ReportGroupId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("ReportGroup");
            });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.ReportArgument", b => {
                b.HasOne("Cortside.SqlReportApi.Domain.ReportArgumentQuery", "ReportArgumentQuery")
                    .WithMany()
                    .HasForeignKey("ReportArgumentQueryId");

                b.HasOne("Cortside.SqlReportApi.Domain.Report", null)
                    .WithMany("ReportArguments")
                    .HasForeignKey("ReportId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("ReportArgumentQuery");
            });

            modelBuilder.Entity("Cortside.SqlReportApi.Domain.Report", b => {
                b.Navigation("ReportArguments");
            });
#pragma warning restore 612, 618
        }
    }
}
